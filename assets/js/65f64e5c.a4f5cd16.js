"use strict";(self.webpackChunkdda_codebook=self.webpackChunkdda_codebook||[]).push([[5121],{1012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Discourse Relations/Expansion/disjunction","title":"Disjunction (Alternative)","description":"Definition","source":"@site/docs/Discourse Relations/Expansion/disjunction.mdx","sourceDirName":"Discourse Relations/Expansion","slug":"/Discourse Relations/Expansion/disjunction","permalink":"/dda-codebook/Discourse Relations/Expansion/disjunction","draft":false,"unlisted":false,"editUrl":"https://github.com/NSF-iSAT/dda-codebook/tree/main/docs/Discourse Relations/Expansion/disjunction.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Disjunction (Alternative)","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"SubstitutedBy","permalink":"/dda-codebook/Discourse Relations/Expansion/Substitution/substitutedby"},"next":{"title":"Restate-Equal","permalink":"/dda-codebook/Discourse Relations/Expansion/restate-equal"}}');var o=t(4848),s=t(8453);const a={title:"Disjunction (Alternative)",sidebar_position:2},r=void 0,d={},c=[{value:"Definition",id:"definition",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Used when:"})," the two arguments are presented as alternatives, with either one or both holding.\nAs with Conjunction, Disjunction is used when both its arguments bear the same relation to some other situation evoked in the discourse, making a similar contribution with respect to that situation.\nWhile the arguments also relate to each other as alternatives (with one or both holding), they also both relate in the same way to this other situation."]}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"(1) A: We should do X and Y.\n(2) A: Or we could do Z instead.\n---\n(2) -- Disjunction --\x3e (1)\n"})}),"\n",(0,o.jsx)(n.p,{children:"(2) suggests an alternative to the choices in (1)."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"<in a collaborative board game: Forbidden Island>\n\n(185) Engineer: Are we allowed to do that or you have to wait for your turn?\n---\n(185) -- Alternative --\x3e (185)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Engineer asks a question with two alternatives, where in this case only one alternative is possible."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"(771) gw4s: nah, sorry, again it's clay on my mind\n(772) gw4s: or 2 wood\n---\n(772) -- Alternative --\x3e (771)\n"})}),"\n",(0,o.jsx)(n.p,{children:"gw4s is engaged in a trade dialogue, and suggests two alternatives they would accept in an offer: clay (771) or 2 wood (772)."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);